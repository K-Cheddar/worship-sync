/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Version checking functionality
let currentVersion: string | null = null;
let checkInterval: ReturnType<typeof setInterval> | null = null;

// Function to check if a version is newer
function isNewerVersion(newVersion: string, currentVersion: string): boolean {
  const v1Parts = newVersion.split(".").map(Number);
  const v2Parts = currentVersion.split(".").map(Number);

  for (let i = 0; i < Math.max(v1Parts.length, v2Parts.length); i++) {
    const v1Part = v1Parts[i] || 0;
    const v2Part = v2Parts[i] || 0;

    if (v1Part > v2Part) {
      return true;
    }
    if (v1Part < v2Part) {
      return false;
    }
  }

  return false;
}

// Function to check for version updates
async function checkForUpdates() {
  try {
    // Get the base URL from the service worker's location
    const baseUrl = self.location.origin;
    const apiPath = baseUrl.includes("localhost")
      ? "http://localhost:5000"
      : baseUrl;
    const response = await fetch(`${apiPath}/api/version`, {
      cache: "no-cache", // Always fetch fresh version
    });

    if (response.ok) {
      const { version } = await response.json();

      // Get current version from clients (which have access to localStorage)
      const clients = await self.clients.matchAll();

      // Try to get the current version from any available client
      for (const client of clients) {
        try {
          // Request current version from client
          client.postMessage({ type: "GET_CURRENT_VERSION" });
          // Note: We'll handle the response in the message event listener
        } catch (error) {
          console.error("Error requesting current version from client:", error);
        }
      }

      // If we have a current version and the new version is newer, notify clients
      if (currentVersion && isNewerVersion(version, currentVersion)) {
        console.log(`New version detected: ${currentVersion} â†’ ${version}`);

        // New version detected, notify all clients
        clients.forEach((client) => {
          client.postMessage({
            type: "VERSION_UPDATE",
            version: version,
            currentVersion: currentVersion,
          });
        });
      } else if (!currentVersion) {
        // If we don't have a current version, this might be the first check
        // Set the current version but don't notify clients to update their stored version
        currentVersion = version;
        console.log("Service Worker: Setting initial version:", version);
      } else {
        console.log("Service Worker: No new version detected");
      }

      // Don't update the stored version automatically - only when user actually updates
      // The stored version should remain the same until the user updates
    } else {
      console.error(
        "Service Worker: Failed to fetch version, status:",
        response.status
      );
    }
  } catch (error) {
    console.error("Error checking for updates:", error);
  }
}

// Start version checking when service worker installs
self.addEventListener("install", (event) => {
  // Start checking for updates once a day
  checkInterval = setInterval(checkForUpdates, 24 * 60 * 60 * 1000);

  // Check immediately on install
  event.waitUntil(checkForUpdates());
});

// Handle service worker activation
self.addEventListener("activate", (event) => {
  event.waitUntil(
    Promise.all([
      // Take control of all clients
      self.clients.claim(),
      // Start version checking
      checkForUpdates(),
    ])
  );
});

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }

  // Handle version check requests from clients
  if (event.data && event.data.type === "CHECK_VERSION") {
    event.waitUntil(checkForUpdates());
  }

  // Handle current version response from clients
  if (event.data && event.data.type === "CURRENT_VERSION_RESPONSE") {
    // Update the service worker's current version with the stored version
    if (event.data.version) {
      currentVersion = event.data.version;
    }
  }
});

// Clean up interval when service worker is terminated
self.addEventListener("beforeunload", () => {
  if (checkInterval) {
    clearInterval(checkInterval);
  }
});

// Any other custom service worker logic can go here.
